
// Domeniul ales este hypermarket
#include<iostream>
#include<fstream>
using namespace std;

class Furnizori;
class Client;

class Casier
{
private:
	static int procent_reducere;
	const int id;
	char* nume;
	int varsta;
	int salariu;
	int vechime;
	bool full_time;
public:
	

	Casier(const Casier& c) :id(c.id)
	{
		this->nume = new char[strlen(c.nume) + 1];
		strcpy_s(nume, strlen(c.nume) + 1, c.nume);
		this->varsta = c.varsta;
		this->salariu = c.salariu;
		this->vechime = c.vechime;
		this->full_time = c.full_time;
	}
	Casier():id(3)
	{
		this->nume = new char[strlen("Dumitru") + 1];
		strcpy_s(nume, strlen("Dumitru") + 1, "Dumitru");
		this->varsta = 30;
		this->salariu = 2500;
		this->vechime = 3;
		this->full_time = true;
	}



	Casier(int varsta, int salariu) :id(4)
	{
		this->nume = new char[strlen("Rares") + 1];
		strcpy_s(nume, strlen("Rares") + 1, "Rares");
		this->varsta = varsta;
		this->salariu = salariu;
		this->vechime = 5;
		this->full_time = true;
	}



	Casier(char* nume, int salariu, int vechime) : id(5)
	{
		this->nume = new char[strlen(nume) + 1];
		strcpy_s(this->nume, strlen(nume) + 1, nume);
		this->varsta = 24;
		this->salariu = salariu;
		this->vechime = vechime;
		this->full_time = false;
	}

	~Casier() {
		if (nume != NULL)
			delete[]this->nume;
	}

	const int getId()
	{
		return this->id;
	}
	char* getNume()
	{
		return this->nume;
	}
	void setNume(char* nume)
	{
		if (this->nume != NULL)
			delete[]this->nume;
		this->nume = new char[strlen(nume) + 1];
		strcpy_s(this->nume, strlen(nume)+1, nume);
	}
	int getVarsta()
	{
		return this->varsta;
	}
	void set_Varsta(int varsta)
	{
		this->varsta = varsta;
	}
	int getSalariu()
	{
		return this->salariu;
	}
	void setSalariu(int salariu)
	{
		this->salariu = salariu;
	}
	int getVechime()
	{
		return this->vechime;
	}
	void setVechime(int vechime)
	{
		this->vechime = vechime;
	}
	bool getFull_time()
	{
		return this->full_time;
	}
	void setFull_time(bool full_time)
	{
		this->full_time = full_time;
	}
	static int getProcent()
	{
		return Casier::procent_reducere;
	}
	static void setProcent(int procent_reducere)
	{
		Casier::procent_reducere = procent_reducere;
	}
	const Casier& operator=(const Casier& c)
	{
		if (this != &c)
		{
			if (this->nume != NULL)
				delete[]this->nume;
			this->nume = new char[strlen(c.nume) + 1];
			strcpy_s(this->nume, strlen(c.nume) + 1, c.nume);
			this->varsta = c.varsta;
			this->salariu = c.salariu;
			this->vechime = c.vechime;
			this->full_time = c.full_time;
		}
		return *this;
	}
	const Casier operator+(const Casier& c) const
	{
		Casier aux=*this;
		aux.salariu = this->salariu + c.salariu;
		return aux;
		
	}
	Casier operator++()
	{
		
		this->vechime++;
		return *this;

	}

	bool operator<(const Casier& c) const
	{
		return this->salariu < c.salariu;
	}



	void afisare()
	{
		cout << "Casierul are numele " << nume << " , are id-ul:"<<id<< " ,varsta de " << varsta << " ani, salariul de " << salariu << " lei si o vechime de " << vechime << " ani. Are un procent de reducere de " << procent_reducere<<"% .";
		if (full_time == true)
			cout << " Acesta este angajat full-time" << endl;
		else
			cout << " Acesta este angajat part-time" << endl;

	}
	static void modifica_reducerea(int reducere_noua)
	{
		procent_reducere = reducere_noua;
	}
	friend void Crestere_salariu(Casier& c, int procent,int vechime);
	friend istream& operator>>(istream& is, Casier& c);
	friend ostream& operator<<(ostream& ost,  const Casier& c);
	friend Client;
	friend ofstream& operator<<(ofstream& ost, const Casier& c);
	friend ifstream& operator>>(ifstream& is, Casier& c);

	void ScriereInFisierBinar(fstream& c)
	{
		int lungime = strlen(this->nume);
		c.write((char*)&lungime, sizeof(int));
		for (int i = 0; i < lungime; i++)
			c.write((char*)&this->nume[i], sizeof(char));
		c.write((char*)&this->varsta, sizeof(int));
		c.write((char*)&this->salariu, sizeof(int));
		c.write((char*)&this->vechime, sizeof(int));
		c.write((char*)&this->full_time, sizeof(bool));

	}

	void CitireDinFisierBinar(fstream& c)
	{
		int lungime;
		c.read((char*)&lungime, sizeof(int));
		if (this->nume != NULL)
			delete[]this->nume;
		this->nume = new char[lungime +1];
		for (int i = 0; i < lungime; i++)
			c.read((char*)&this->nume[i], sizeof(char));
		this->nume[lungime] = '\0';
		c.read((char*)&this->varsta, sizeof(int));
		c.read((char*)&this->salariu, sizeof(int));
		c.read((char*)&this->vechime, sizeof(int));
		c.read((char*)&this->full_time, sizeof(bool));

	}

};
int Casier::procent_reducere = 10;

istream& operator>>(istream& is,  Casier& c)
{
	char nume[100];
	cout << "Numele casierului este: ";
	is >> nume;
	if (c.nume != NULL)
		delete[]c.nume;
	c.nume = new char[strlen(nume) + 1];
	strcpy_s(c.nume, strlen(nume) + 1, nume);
	cout << "Varsta acestuia este: ";
	is >> c.varsta;
	cout << "Salariul lui este de (lei): ";
	is >> c.salariu;
	cout << "Are o vechime de (ani): ";
	is >> c.vechime;
	cout << "FULL-time/part-time(1-full-time,0-part-time)";
	is >> c.full_time;
	return is;
}
ifstream& operator>>(ifstream& is, Casier& c)
{
	char nume[100];
	is >> nume;
	if (c.nume != NULL)
		delete[]c.nume;
	c.nume = new char[strlen(nume) + 1];
	strcpy_s(c.nume, strlen(nume) + 1, nume);
	is >> c.varsta;
	is >> c.salariu;
	is >> c.vechime;
	is >> c.full_time;
	return is;
}
ostream& operator<<(ostream& ost,  const Casier& c)
{
	ost << "Casierul are numele " << c.nume << ", are id-ul: " << c.id<<" ,procentul de reducere: "<<c.procent_reducere<<", varsta acestuia este de " << c.varsta << " ani, salariul este de " << c.salariu << " lei, iar vechimea angajatului este de : " << c.vechime << " ani.";
	if (c.full_time == true)
		ost << "Casierul este angajat full-time";
	else
		ost << "Casierul este angajat part-time";
	return ost;
}
 

ofstream& operator<<(ofstream& ost, const Casier& c)
{
	ost<< c.nume<<endl<<c.varsta <<endl << c.salariu << endl << c.vechime << endl;
	ost << c.full_time;
	return ost;
}


void Crestere_salariu(Casier& c, int procent,int vechime)
{
	int salariu_vechi=c.salariu;
	if (c.vechime > vechime)
		c.salariu = c.salariu + (c.salariu * procent)/100;
		cout << "Inainte de modificarea salariului,casierul " << c.nume << " avea salariul de " << salariu_vechi << " lei. Dupa modificarea procentuala de " << procent << " %" << " salariul acestuia este de " << c.salariu << " lei. Acesta a depasit pragul de vechime de " << vechime << " ani"<<endl;
}


class CasierSef : public Casier
{
private:

	int nrbonusuri;
	int* bonusuri;
public:
	CasierSef() : Casier()
	{
		this->nrbonusuri = 3;
		this->bonusuri = new int[this->nrbonusuri];
		this->bonusuri[0] = 300;
		this->bonusuri[1] = 500;
		this->bonusuri[2] = 700;
	}
	CasierSef(int varsta, int salariu, int nrbonusuri, int* bonusuri) : Casier(varsta, salariu)
	{
		if (nrbonusuri > 0)
		{
			this->nrbonusuri = nrbonusuri;

			this->bonusuri = new int[this->nrbonusuri];
			for (int i = 0; i < this->nrbonusuri; i++)
				this->bonusuri[i] = bonusuri[i];

		}
		else
		{
			this->nrbonusuri = 0;
			this->bonusuri = NULL;
		}
	}
	CasierSef(const CasierSef& c) : Casier(c)
	{
		this->nrbonusuri = c.nrbonusuri;
		this->bonusuri = new int[this->nrbonusuri];
		for (int i = 0; i < this->nrbonusuri; i++)
			this->bonusuri[i] = c.bonusuri[i];
	}

	~CasierSef()
	{
		if (this->bonusuri != NULL)
			delete[]this->bonusuri;
	}

	const CasierSef& operator=(const CasierSef& c)
	{
		if (this != &c)
		{
			(Casier&)*this = (Casier&)c;
			this->nrbonusuri = c.nrbonusuri;
			if (this->bonusuri != NULL)
				delete[]this->bonusuri;
			this->bonusuri = new int[this->nrbonusuri];
			for (int i = 0; i < this->nrbonusuri; i++)
				this->bonusuri[i] = c.bonusuri[i];

		}
		return *this;

	}
	void setNrBonusuri(int nr_bonusuri, int* bonusuri)
	{
		this->nrbonusuri = nr_bonusuri;
		if (this->bonusuri != NULL)
			delete[]this->bonusuri;
		this->bonusuri = new int[this->nrbonusuri];
		for (int i = 0; i < this->nrbonusuri; i++)
			this->bonusuri[i] = bonusuri[i];

	}
	int getNrBonusuri()
	{
		return this->nrbonusuri;
	}
	int getBonusuri(int i)
	{
		return this->bonusuri[i];
	}
	friend ostream& operator<<(ostream& ost, CasierSef& c);
};

ostream& operator<<(ostream& ost, CasierSef& c)
{
	ost << (Casier)c;
	ost << "Nr de bonusuri este : " << c.nrbonusuri << endl;
	ost << "Bonusurile sunt: " << endl;
	for (int i = 0; i < c.nrbonusuri; i++)
		ost << "Bonusul " << i + 1 << " este: " << c.bonusuri[i] << endl;
	return ost;
}


class Patiserie
{
private:
	static int tva;
	const int cod_produs;
	string nume;
	float pret;
	float greutate;
	string* ingrediente;
	int nr_ingrediente;
public:
	Patiserie(const Patiserie& p) :cod_produs(p.cod_produs)
	{
		int i;
		this->nume = p.nume;
		this->pret = p.pret;
		this->greutate = p.greutate;
		this->nr_ingrediente = p.nr_ingrediente;
		this->ingrediente = new string[this->nr_ingrediente];
		for (i = 0; i < this->nr_ingrediente; i++)
			this->ingrediente[i] = p.ingrediente[i];
		
	}
	Patiserie():cod_produs(14)
	{
		this->nume = "Merdenea";
		this->pret = 3.5;
		this->greutate = 0.25;
		this->nr_ingrediente = 4;
		this->ingrediente = new string[4];
		this->ingrediente[0] = "sare";
		this->ingrediente[1] = "unt";
		this->ingrediente[2] = "foietaj";
		this->ingrediente[3] = "indulcitori";

	}



	Patiserie(string nume, float pret, float greutate) :cod_produs(20)
	{
		this->nume = nume;
		this->pret = pret;
		this->greutate = greutate;
		this->nr_ingrediente = 2;
		this->ingrediente = new string[2];
		this->ingrediente[0] = "foietaj";
		this->ingrediente[1] = "unt";
	}
	


	Patiserie(int nr_ingrediente,string* ingrediente) :cod_produs(10)
	{
		int i;
		this->nume = "Bagheta";
		this->pret = 5.2;
		this->greutate = 0.5;
		this->nr_ingrediente = nr_ingrediente;
		this->ingrediente = new string[nr_ingrediente];
		for (i = 0; i < nr_ingrediente; i++)
			this->ingrediente[i] = ingrediente[i];

	
	}


	~Patiserie() {
		if (ingrediente != NULL)
			delete[]this->ingrediente;
	}

	
	
	static void crestere_tva()
	{
		tva++;
	}
	
	string getNume()
	{
		return this->nume;
	}
	void setNume(string nume)
	{
		this->nume = nume;
	}
	float getPret()
	{
		return this->pret;
	}
	void setPret(float pret)
	{
		this->pret = pret;
	}
	float getGreutate()
	{
		return this->greutate;
	}
	void setGreutate(float greutate)
	{
		this->greutate = greutate;
	}
	string getIngrediente(int i)
	{
		if (i >= 0 && i < nr_ingrediente)
			return this->ingrediente[i];
	}
	int getNr_ingrediente()
	{
		return this->nr_ingrediente;
	}

	void setIngrediente(string* ingrediente, int nr_ingrediente)
	{
		if (nr_ingrediente != 0)
		{
			this->nr_ingrediente = nr_ingrediente;
			if (this->ingrediente != NULL)
				delete[]this->ingrediente;
			this->ingrediente = new string[this->nr_ingrediente];
			int i;
			for (i = 0; i < nr_ingrediente; i++)
				this->ingrediente[i] = ingrediente[i];

		}
	}

	static int getTva()
	{
		return Patiserie::tva;
	}
	static void setTva(int tva)
	{
		Patiserie::tva = tva;
	}
	const int getCod_produs()
	{
		return this->cod_produs;
	}
	const Patiserie& operator=(const Patiserie& p)
	{
		if (this != &p)
		{
			this->nume = p.nume;
			this->pret = p.pret;
			this->greutate = p.greutate;
			this->nr_ingrediente = p.nr_ingrediente;
			if (this->ingrediente != NULL)
				delete[]this->ingrediente;
			this->ingrediente = new string[this->nr_ingrediente];
			for (int i = 0; i < this->nr_ingrediente; i++)
				this->ingrediente[i] = p.ingrediente[i];
		}
		return *this;
	}
	const Patiserie& operator-=(int reducere)
	{
		this->pret=this->pret-(reducere*this->pret)/100;
		return *this;
			
	}
	string& operator[](int index)
	{
		if (index > 0 && index < this->nr_ingrediente)
			return this->ingrediente[index];
	}
	
	void afisare()
	{
		int i;
		cout << "Produsul de patiserie este " << nume << " ,are codul "<<cod_produs<<" ,are un pret de " << pret <<" lei "<< ",o greutate de " << greutate <<" kg "<< " si " << nr_ingrediente <<" ingrediente. Ingredientele sunt: ";
		for (i = 0; i < nr_ingrediente; i++)
			cout << ingrediente[i]<<" ";
		cout << ".Tva-ul aplicat pentru acest produs este de: " << tva<<"%."<<endl;
	}
	friend void Cauta_furnizor(Furnizori f,Patiserie p, string ingredient);
	friend istream& operator>>(istream& ist, Patiserie& p);
	friend ostream& operator<<(ostream& os, const Patiserie& p);
	friend ifstream& operator>>(ifstream& ist, Patiserie& p)
	{
		
		ist >> p.nume;
		ist >> p.pret;
		ist >> p.greutate;
		ist >> p.nr_ingrediente;
		int i;
		if (p.ingrediente != NULL)
			delete[]p.ingrediente;
		p.ingrediente = new string[p.nr_ingrediente];
		for (i = 0; i < p.nr_ingrediente; i++)
		{
			ist >> p.ingrediente[i];
		}
		return ist;
	}
	friend ofstream& operator<<(ofstream& os, Patiserie& p)
	{
		os << p.nume << endl << p.pret << endl << p.greutate << endl << p.nr_ingrediente << endl;
		for (int i = 0; i < p.nr_ingrediente; i++)
		{
			os <<p.ingrediente[i] << endl;
		}
		return os;
	}
};

istream& operator>>(istream& ist, Patiserie& p)
{
	cout << "Numele produsului este: ";
	ist >> p.nume;
	cout << "Pretul produsului este: ";
	ist >> p.pret;
	cout << "Greutatea produsului este: ";
	ist >> p.greutate;
	cout << "Numarul de ingrediente necesare fabricarii produsului este: ";
	ist >> p.nr_ingrediente;
	int i;
	if (p.ingrediente != NULL)
		delete[]p.ingrediente;
	p.ingrediente = new string[p.nr_ingrediente];
	for (i = 0; i < p.nr_ingrediente; i++)
	{
		cout << "Ingredientul " << i + 1 << " este :";
		ist >> p.ingrediente[i];
	}
	return ist;
}


 ostream& operator<<(ostream& os, const Patiserie& p)
{
	os << "Numele produsului este: " << p.nume << " ,pretul acestuia este: " << p.pret << " lei, greutatea este de " << p.greutate << " kg, numarul de ingrediente este: " << p.nr_ingrediente<<" ,id-ul este "<<p.cod_produs<<" iar tva-ul "<<p.tva<<"."<<endl;
	for (int i = 0; i < p.nr_ingrediente; i++)
	{
		os << " Ingredientul " << i + 1 << " este: " << p.ingrediente[i]<<endl;
	}
	return os;
}



int Patiserie::tva = 9;

class PatiseriePeComanda : public Patiserie
{
private:
	char* data_plasare;
	char* data_livrare;
	string NumeClient;
public:

	PatiseriePeComanda() : Patiserie()
	{
		this->data_plasare = new char[strlen("13-05-2023") + 1];
		strcpy_s(this->data_plasare, strlen("13-05-2023") + 1, "13-05-2023");
		this->data_livrare = new char[strlen("21-05-2023") + 1];
		strcpy_s(this->data_livrare, strlen("21-05-2023")+1, "21-05-2023");
		this->NumeClient = "Ana";

	}
	PatiseriePeComanda(char* data_plasare, char* data_livrare, string NumeClient, string nume, float pret, float greutate) : Patiserie(nume, pret, greutate)
	{
		this->data_plasare = new char[strlen(data_plasare) + 1];
		strcpy_s(this->data_plasare, strlen(data_plasare) + 1, data_plasare);
		this->data_livrare = new char[strlen(data_livrare) + 1];
		strcpy_s(this->data_livrare, strlen(data_livrare) + 1, data_livrare);
		this->NumeClient = NumeClient;
	}
	PatiseriePeComanda(const PatiseriePeComanda& pc) : Patiserie(pc)
	{
		this->data_plasare = new char[strlen(pc.data_plasare) + 1];
		strcpy_s(this->data_plasare, strlen(pc.data_plasare) + 1, pc.data_plasare);
		this->data_livrare = new char[strlen(pc.data_livrare) + 1];
		strcpy_s(this->data_livrare, strlen(pc.data_livrare) + 1, pc.data_livrare);
		this->NumeClient = pc.NumeClient;
	}
	~PatiseriePeComanda()
	{
		if (this->data_livrare != NULL)
			delete[]this->data_livrare;
		if (this->data_plasare != NULL)
			delete[]this->data_plasare;
	}
	const PatiseriePeComanda& operator=(const PatiseriePeComanda& pc)
	{
		if (this != &pc)
		{
			(Patiserie&)*this = (Patiserie&)pc;
			this->data_plasare = new char[strlen(pc.data_plasare) + 1];
			strcpy_s(this->data_plasare, strlen(pc.data_plasare) + 1, pc.data_plasare);
			this->data_livrare = new char[strlen(pc.data_livrare) + 1];
			strcpy_s(this->data_livrare, strlen(pc.data_livrare) + 1, pc.data_livrare);
			this->NumeClient = pc.NumeClient;
		}
		return *this;
	}
	void SetDataPlasare(char* data_plasare)
	{
		if (this->data_plasare != NULL)
			delete[]this->data_plasare;
		this->data_plasare = new char[strlen(data_plasare) + 1];
		strcpy_s(this->data_plasare, strlen(data_plasare) + 1, data_plasare);
	}
	char* GetDataPlasare()
	{
		return this->data_plasare;
	}
	void SetDataLivrare(char* data_livrare)
	{
		if (this->data_livrare != NULL)
			delete[]this->data_livrare;
		this->data_livrare = new char[strlen(data_livrare) + 1];
		strcpy_s(this->data_livrare, strlen(data_livrare) + 1, data_livrare);

	}
	char* GetDataLivrare()
	{
		return this->data_livrare;

	}
	void SetNumeClient(string NumeClient)
	{
		this->NumeClient = NumeClient;
	}
	string GetNumeClient()
	{
		return this->NumeClient;
	}

	friend ostream& operator<<(ostream& os,PatiseriePeComanda& pc)
	{
		os << (Patiserie)pc;
		os << "Numele clientului care a comandat este: " << pc.NumeClient << endl;
		os << " Data la care a plasat comanda este: " << pc.data_plasare << endl;
		os << "Data la care trebuie livrata comanda este: " << pc.data_livrare << endl;
		return os;
	}
};

class Furnizori
{
private:
	static int nr_furnizori;
	const int id;
	string nume;
	char* oras;
	string* produs;
	int nr_produse;
	int durata_contract;
public:
	
	Furnizori(const Furnizori& f) :id(f.id)
	{
		int i;
		this->nume = f.nume;
		this->oras = new char[strlen(f.oras) + 1];
		strcpy_s(oras, strlen(f.oras) + 1, f.oras);
		this->nr_produse = f.nr_produse;
		this->produs = new string[this->nr_produse];
		for (i = 0; i < this->nr_produse; i++)
		{
			this->produs[i] = f.produs[i];
		}
		this->durata_contract = f.durata_contract;
	}
	Furnizori(): id(26)
	{
		this->nr_furnizori++;
		this->nume = "Omega";
		this->oras = new char[strlen("Buzau") + 1];
		strcpy_s(oras, strlen("Buzau") + 1, "Buzau");
		this->nr_produse = 3;
		this->produs = new string[nr_produse];
		this->produs[0] = "biscuiti";
		this->produs[1] = "ciocolata";
		this->produs[2] = "caramele";
		this->durata_contract = 1;
	}



	Furnizori(string nume, int durata_contract):id(15)
	{
		this->nr_furnizori++;
		this->nume = nume;
		this->oras = new char[strlen("Bacau") + 1];
		strcpy_s(oras, strlen("Bacau") + 1, "Bacau");
		this->nr_produse = 2;
		this->produs = new string[nr_produse];
		this->produs[0] = "pesmet";
		this->produs[1] = "faina";
		this->durata_contract = 2;
	}



	Furnizori(string* produs) :id(33)
	{
		this->nr_furnizori++;
		this->nume = "Fructo";
		this->oras = new char[strlen("Arges") + 1];
		strcpy_s(oras, strlen("Arges") + 1, "Arges");
		this->nr_produse = 4;
		this->produs = new string[nr_produse];
		for (int i = 0; i < nr_produse; i++)
			this->produs[i] = produs[i];
		this->durata_contract = 3;
	}

	~Furnizori() {
		if (oras != NULL)
			delete[]this->oras;
		if (produs != NULL)
			delete[]this->produs;
	}

	static void afiseaza_nrFurnizori()
	{
		cout << "Numarul total de furnizori este: " << nr_furnizori << endl;
	}


	static int getNrFurnizori()
	{
		return Furnizori::nr_furnizori;
	}
	static void setNrFurnizori(int nr_furnizori)
	{
		Furnizori::nr_furnizori = nr_furnizori;
	}
	const int getIdFurnizori()
	{
		return this->id;
	}
	string getNume()
	{
		return this->nume;
	}
	void setNume(string nume)
	{
		this->nume = nume;
	}
	char* getOras()
	{
		return this->oras;
	}
	void setOras(char* oras)
	{
		if (this->oras != NULL)
			delete[]this->oras;
		this->oras = new char[strlen(oras) + 1];
		strcpy_s(this->oras, strlen(oras) + 1, oras);
	}
	void setProdus(string* produs, int nr_produse)
	{
		if (nr_produse != 0)
		{
			this->nr_produse = nr_produse;
			if (this->produs != NULL)
				delete[]this->produs;
			this->produs = new string[nr_produse];
			int i;
			for (i = 0; i < this->nr_produse; i++)
				this->produs[i] = produs[i];
		}
	}
	string getProdus(int i)
	{
		if (i >= 0 && i < this->nr_produse)
			return this->produs[i];
	}
	int getNrProduse()
	{
		return this->nr_produse;
	}
	int getDurataContract()
	{
		return this->durata_contract;
	}
	void setDurataContract(int durata_contract)
	{
		this->durata_contract = durata_contract;
	}

	const Furnizori& operator=(const Furnizori &f)
	{
		if (this != &f)
		{
			this->nume = f.nume;
			this->nr_produse = f.nr_produse;
			if (this->oras != NULL)
				delete[]this->oras;
			this->oras = new char[strlen(f.oras) + 1];
			strcpy_s(this->oras, strlen(f.oras) + 1, f.oras);
			if (this->produs != NULL)
				delete[]this->produs;
			this->produs = new string[this->nr_produse];
			for (int i = 0; i < this->nr_produse; i++)
				this->produs[i] = f.produs[i];
			this->durata_contract = f.durata_contract;
		}
		return *this;
	}
	 const Furnizori operator+(const Furnizori& f) const
	{
		Furnizori aux = *this;
		aux.nr_produse = this->nr_produse + f.nr_produse;
		int i;
		if (aux.produs != NULL)
			delete[]aux.produs;
		aux.produs = new string[aux.nr_produse];
		for (i = 0; i < this->nr_produse; i++)
			aux.produs[i] = this->produs[i];
		for (i=this->nr_produse; i < aux.nr_produse; i++)
			aux.produs[i] = f.produs[i-this->nr_produse];
		aux.durata_contract = this->durata_contract + f.durata_contract;
		return aux;
	}
	 bool operator>(const Furnizori& f)
	 {
		 return this->durata_contract > f.durata_contract;
	 }
	void afisare()
	{
		cout << "Furnizorul " << nume << " are id-ul : " << id << " , este din orasul " << oras << ", livreaza " << nr_produse << " produse si are un contract cu durata de " << durata_contract << " ani. Produsele furnizate sunt:";
		for (int i = 0; i < nr_produse; i++)
			cout << produs[i] << " ";
		cout << ".Numarul total de furnizori este: " << nr_furnizori << endl;
		
	}
	friend void Cauta_furnizor(Furnizori f, Patiserie p, string ingredient);
	friend ostream& operator<<(ostream& ost, Furnizori f);
	friend istream& operator>>(istream& ist, Furnizori& f);
	friend ifstream& operator>>(ifstream& ist, Furnizori& f)
	{
		char oras[100];
		ist >> f.nume;
		ist >> oras;
		if (f.oras != NULL)
			delete[]f.oras;
		f.oras = new char[strlen(oras) + 1];
		strcpy_s(f.oras, strlen(oras) + 1, oras);
		ist >> f.nr_produse;
		if (f.produs != NULL)
			delete[]f.produs;
		f.produs = new string[f.nr_produse];
		for (int i = 0; i < f.nr_produse; i++)
		{
			ist >> f.produs[i];
		}
		ist >> f.durata_contract;
		return ist;


	}
	friend ofstream& operator<<(ofstream& ost, Furnizori f)
	{
		ost <<f.nume <<endl << f.oras<<endl;

		ost << f.nr_produse<<endl;
		for (int i = 0; i < f.nr_produse; i++)
			ost <<f.produs[i]<<endl;
		ost <<f.durata_contract<< endl;
		return ost;

	}

};
istream& operator>>(istream& ist, Furnizori& f)
{
	char oras[100];
	cout << "Furnizorul are numele: ";
	ist >> f.nume;
	cout << "Acesta este din orasul";
	ist >> oras;
	if (f.oras != NULL)
		delete[]f.oras;
	f.oras = new char[strlen(oras) + 1];
	strcpy_s(f.oras, strlen(oras) + 1, oras);
	cout << "Numarul de produse furnizate este: ";
	ist >> f.nr_produse;
	if (f.produs != NULL)
		delete[]f.produs;
	f.produs = new string[f.nr_produse];
	for (int i = 0; i < f.nr_produse; i++)
	{
		cout << "Produsul " << i + 1 << " este: ";
		ist >> f.produs[i];
	}
	cout << "Contractul are o durata de (ani) ";
	ist >> f.durata_contract;
	return ist;


}

ostream& operator<<(ostream& ost, Furnizori f)
{
	ost << "Numarul de furnizori este: " << f.nr_furnizori << ", id-ul furnizorului este: " << f.id << ", numele furnizorului este: " << f.nume << " ,iar numele orasului este: " << f.oras;
	
	ost << ". Numarul de produse este: " << f.nr_produse<<" ."<<endl;
	for (int i = 0; i < f.nr_produse; i++)
		ost << " Produsul " << i + 1 << " adus de furnizorul " << f.nume << " este " << f.produs[i]<<" ."<<endl;
	ost << " Contractul are o durata de " << f.durata_contract<<" ani."<<endl;
	return ost;

}
int Furnizori::nr_furnizori = 0;

class Client
{ private:
	const int id;
	string nume;
	Casier casier;
	int nrProduseCumparate;
	string* produseCumparate;
public:
	Client() :id(10)
	{
		this->nume = "Ciprian";
		this->nrProduseCumparate = 3;
		this->produseCumparate = new string[this->nrProduseCumparate];
		this->produseCumparate[0] = "Corn";
		this->produseCumparate[1] = "Merdenea";
		this->produseCumparate[2] = "Covrig";

	}
	Client(int nrProduseCumparate, string* produseCumparate) :id(15)
	{
		this->nume = "Luca";
		this->nrProduseCumparate = nrProduseCumparate;
		this->produseCumparate = new string[this->nrProduseCumparate];
		for (int i = 0; i < this->nrProduseCumparate; i++)
			this->produseCumparate[i] = produseCumparate[i];
	}

	Client(Client& c) :id(c.id)
	{
		this->nume = c.nume;
		this->nrProduseCumparate = c.nrProduseCumparate;
		this->produseCumparate = new string[this->nrProduseCumparate];
		for (int i = 0; i < this->nrProduseCumparate; i++)
			this->produseCumparate[i] = c.produseCumparate[i];
		this->casier = c.casier;
	}
	~Client()
	{
		if (this->produseCumparate != NULL)
			delete[]this->produseCumparate;
	}
	const Client& operator=(const Client& c)
	{
		if (this != &c)
		{
			this->nume = c.nume;
			this->nrProduseCumparate = c.nrProduseCumparate;
			this->casier = c.casier;
			if (this->produseCumparate != NULL)
				delete[]this->produseCumparate;
			this->produseCumparate = new string[this->nrProduseCumparate];
			for (int i = 0; i < this->nrProduseCumparate; i++)
				this->produseCumparate[i] = c.produseCumparate[i];
		}
		return *this;
	}

	const int getId()
	{
		return this->id;
	}
	void setNume(string nume)
	{
		this->nume = nume;
	}
	string getNume()
	{
		return this->nume;
	} 
	void setNrProduseCumparate(int nrProduseCumparate,string* produseCumparate)
	{
		this->nrProduseCumparate = nrProduseCumparate;
		if (this->produseCumparate != NULL)
			delete[]this->produseCumparate;
		this->produseCumparate = new string[this->nrProduseCumparate];
		for (int i = 0; i < this->nrProduseCumparate; i++)
			this->produseCumparate[i] = produseCumparate[i];
	}
	int getNrProduseCumparate()
	{
		return this->nrProduseCumparate;
	}
	string getProduseCumparate(int i)
	{
		return this->produseCumparate[i];
	}

	void setCasier(Casier c)
	{
		this->casier = c;
	}
	Casier getCasier()
	{
		return this->casier;
	}
	
	const Client operator+(const Client& c)
	{
		Client aux = *this;
		aux.nrProduseCumparate = this->nrProduseCumparate + c.nrProduseCumparate;
		if (aux.produseCumparate != NULL)
			delete[]aux.produseCumparate;
		aux.produseCumparate = new string[aux.nrProduseCumparate];
		for (int i = 0; i < this->nrProduseCumparate; i++)
			aux.produseCumparate[i] = this->produseCumparate[i];
		for (int i= this->nrProduseCumparate; i < aux.nrProduseCumparate; i++)
			aux.produseCumparate[i] = c.produseCumparate[i- this->nrProduseCumparate];
		return aux;

	}

	friend ostream& operator<<(ostream& out, Client& c)
	{
		out << "Clientul are id-ul " << c.id << ",numele " << c.nume << " ,iar numarul de produse cumparate este " << c.nrProduseCumparate << ".";
			out << "Produsele cumparate sunt: "<<endl;
			for (int i = 0; i < c.nrProduseCumparate; i++)
				out << "Produsul " << i + 1 << " cumparat este: " << c.produseCumparate[i] << endl;
			out << "Clientul a fost ajutat de casierul " << c.casier.getNume() << endl;
			return out;
	}
	void ScriereInFisierBinar(fstream& cl)
	{
		const char* nume = this->nume.c_str();
		int lungimeNume = strlen(nume);
		cl.write((char*)&lungimeNume, sizeof(int));
		for (int i = 0; i < lungimeNume; i++)
			cl.write((char*)&nume[i], sizeof(char));
		cl.write((char*)&this->nrProduseCumparate, sizeof(int));
		const char** vectorProduse = new const char* [this->nrProduseCumparate];
		int* lungimeProduse = new int[this->nrProduseCumparate];
		for (int i = 0; i < this->nrProduseCumparate; i++)
		{
			vectorProduse[i] = this->produseCumparate[i].c_str();
			lungimeProduse[i] = this->produseCumparate[i].length();
		}
		for (int i = 0; i < this->nrProduseCumparate; i++)
		{
			cl.write((char*)&lungimeProduse[i], sizeof(int));
			for (int j = 0; j < lungimeProduse[i]; j++)
				cl.write((char*)&vectorProduse[i][j], sizeof(char));
		}
		int lungime=strlen(this->casier.nume);
		cl.write((char*)&lungime, sizeof(int));
		for (int i = 0; i < lungime; i++)
			cl.write((char*)&this->casier.nume[i], sizeof(char));
	}
	void CitireDinFisierBinar(fstream& cl)
	{
		int lungimeNume;
		cl.read((char*)&lungimeNume, sizeof(int));
		char* nume = new char[lungimeNume + 1];
		for (int i = 0; i < lungimeNume; i++)
			cl.read((char*)&nume[i], sizeof(char));
		nume[lungimeNume] = '\0';
		this->nume.assign(nume, lungimeNume+1);
		cl.read((char*)&this->nrProduseCumparate, sizeof(int));
		if (this->produseCumparate != NULL)
			delete[]this->produseCumparate;
		this->produseCumparate = new string[this->nrProduseCumparate];
		char** vectorProduse = new char* [this->nrProduseCumparate];
		int* lungimeProduse = new int[this->nrProduseCumparate];
		for (int i = 0; i < this->nrProduseCumparate; i++)
		{
			cl.read((char*)&lungimeProduse[i], sizeof(int));
			vectorProduse[i] = new char[lungimeProduse[i] + 1];
			for (int j = 0; j < lungimeProduse[i]; j++)
				cl.read((char*)&vectorProduse[i][j], sizeof(char));
			vectorProduse[i][lungimeProduse[i]] = '\0';
		}
		for (int i = 0; i < this->nrProduseCumparate; i++)
			this->produseCumparate[i].assign(vectorProduse[i], lungimeProduse[i]);
		int lungime;
		cl.read((char*)&lungime, sizeof(int));
		if (this->casier.nume != NULL)
			delete[]this->casier.nume;
		this->casier.nume = new char[lungime + 1];
		for (int i = 0; i < lungime; i++)
			cl.read((char*)&this->casier.nume[i], sizeof(char));
		this->casier.nume[lungime] = '\0';
	}

	bool operator>(Client& c)
	{
		return this->nrProduseCumparate > c.nrProduseCumparate;
	}



};
void Cauta_furnizor(Furnizori f, Patiserie p, string ingredient)
{
	int i,ok=0;
	for (i = 0; i < p.nr_ingrediente; i++)
		if (ingredient == p.ingrediente[i])
			ok = 1;

	if (ok == 0)
		cout << "Ingredientul " << ingredient << " nu este folosit in produsul " << p.nume << endl;
	else
	{
		ok = 0;
		for (i = 0; i < f.nr_produse; i++)
			if (ingredient == f.produs[i])
				ok = 1;
		if (ok == 1)
			cout << "Ingredientul este procurat de la furnizorul " << f.nume<<endl;
		else
			cout << "Ingredientul nu este procurat de la furnizorul " << f.nume<<endl;
	}

	
}


void main()
{
	/*Casier casier1;
	casier1.afisare();
	Casier casier2(23, 2320);
	casier2.afisare();
	char* nume = new char[strlen("Ioana") + 1];
	strcpy_s(nume, strlen("Ioana") + 1, "Ioana");
	Casier casier3(nume, 2400, 3);
	casier3.afisare();
	delete[]nume;

	Patiserie patiserie1;
	patiserie1.afisare();
	Patiserie patiserie2("Covrig", 3.2, 0.15);
	patiserie2.afisare();
	string* ingrediente = new string[2];
	ingrediente[0] = "Sare";
	ingrediente[1] = "Unt";
	Patiserie patiserie3(2, ingrediente);
	patiserie3.afisare();
	delete[]ingrediente;

	Furnizori furnizor1;
	furnizor1.afisare();
	Furnizori furnizor2("Pano", 5);
	furnizor2.afisare();
	string* produs = new string[4];
	produs[0] = "mere";
	produs[1] = "unt";
	produs[2] = "prune";
	produs[3] = "capsuni";
	Furnizori furnizor3(produs);
	furnizor3.afisare();
	delete[]produs;


	Crestere_salariu(casier1, 10, 1);
	Cauta_furnizor(furnizor3, patiserie1, "unt");

	char* nume1 = new char[strlen("Teodor") + 1];
	strcpy_s(nume1, strlen("Teodor") + 1, "Teodor");
	casier1.setNume(nume1);
	casier1.set_Varsta(31);
	casier1.setSalariu(3000);
	casier1.setVechime(4);
	casier1.setFull_time(true);
	casier1.setProcent(8);
	cout << "Casierul are numele " << casier1.getNume() << " , are id-ul:" << casier1.getId() << " ,varsta de " << casier1.getVarsta() << " ani, salariul de " << casier1.getSalariu() << " lei si o vechime de " << casier1.getVechime() << " ani. Are un procent de reducere de " << casier1.getProcent() << "% .";
	if (casier1.getFull_time() == true)
		cout << " Acesta este angajat full-time" << endl;
	else
		cout << " Acesta este angajat part-time" << endl;
	delete[]nume1;

	patiserie2.setNume("Croissant");
	patiserie2.setPret(3);
	patiserie2.setGreutate(0.2);
	string* ingrediente1=new string[3];
	ingrediente1[0] = "sare";
	ingrediente1[1] = "lapte";
	ingrediente1[2] = "drojdie";
	patiserie2.setIngrediente(ingrediente1, 3);
	patiserie2.setTva(8);
	int i;
	cout << "Produsul de patiserie este " << patiserie2.getNume() << " ,are codul " << patiserie2.getCod_produs() << " ,are un pret de " << patiserie2.getPret() << " lei " << ",o greutate de " << patiserie2.getGreutate() << " kg " << " si " << patiserie2.getNr_ingrediente() << " ingrediente. Ingredientele sunt: ";
	for (i = 0; i < patiserie2.getNr_ingrediente(); i++)
		cout << patiserie2.getIngrediente(i) << " ";
	cout << ".Tva-ul aplicat pentru acest produs este de: " << patiserie2.getTva() << "%." << endl;
	delete[]ingrediente1;

	furnizor1.setNrFurnizori(0);
	furnizor1.setNume("Augusto");
	char* oras1 = new char[strlen("Timisoara") + 1];
	strcpy_s(oras1, strlen("Timisoara") + 1, "Timisoara");
	furnizor1.setOras(oras1);
	string* vector_produse = new string[3]{"piper","sare","boia"};
	furnizor1.setProdus(vector_produse,3);
	furnizor1.setDurataContract(4);
	cout << "Furnizorul " << furnizor1.getNume() << " are id-ul : " << furnizor1.getIdFurnizori() << " , este din orasul " << furnizor1.getOras() << ", livreaza " << furnizor1.getNrProduse() << " produse si are un contract cu durata de " << furnizor1.getDurataContract() << " ani. Produsele furnizate sunt:";
	for (int i = 0; i < furnizor1.getNrProduse(); i++)
		cout << furnizor1.getProdus(i) << " ";
	cout << ".Numarul total de furnizori este: " << furnizor1.getNrFurnizori() << endl;
	delete[]oras1;
	delete[]vector_produse;

	Furnizori furnizor4;
	furnizor4 = furnizor3;
	cout << furnizor4<<endl;
	Furnizori furnizor5;
	furnizor5 = furnizor2 + furnizor3;
	cout << furnizor5<<endl;
	if (furnizor1 > furnizor2)
		cout << "Furnizorul " << furnizor1.getNume() << " are durata contractului mai mare decat cel al lui  " << furnizor2.getNume()<<endl;
	else
		cout << "Furnizorul " << furnizor2.getNume() << "  are durata contractului mai mare decat cel al lui " << furnizor1.getNume()<<endl;


	Patiserie patiserie4;
	patiserie4 = patiserie2;
	patiserie4.afisare();
	Patiserie patiserie5;
	cin >> patiserie5;
	patiserie2-= 10;
	patiserie2.afisare();
	cout << patiserie1[2]<<endl;


	Casier casier4;
	casier4 = casier1;
	casier4.afisare();
	Casier casier5;
	casier5 = casier2 + casier3;
	casier5.afisare();
	casier3= ++casier1;
	casier3.afisare();
	if (casier2 < casier3)
		cout << "Casierul " << casier3.getNume() << " are salariul mai mare decat " << casier2.getNume()<<" .";
	else
		cout << "Casierul " << casier2.getNume() << " are salariul mai mare decat " << casier3.getNume()<<" .";

	Patiserie* VectorPatiserie = new Patiserie[2];
	for (int i = 0; i < 2; i++)
		cin >> VectorPatiserie[i];
	for (int i = 0; i < 2; i++)
		cout << VectorPatiserie[i];

	Patiserie** MatricePatiserie = new Patiserie * [3];
	for (int i = 0; i < 3; i++)
		MatricePatiserie[i] = new Patiserie[2];
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 2; j++)
			cin >> MatricePatiserie[i][j];
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 2; j++)
			cout << MatricePatiserie[i][j];
	
	Furnizori* VectorFurnizori = new Furnizori[3];
	for (int i = 0; i < 3; i++)
		cin >> VectorFurnizori[i];
	for (int i = 0; i < 3; i++)
		cout << VectorFurnizori[i];

		Casier* VectorCasieri = new Casier[2];
		for (int i = 0; i < 2; i++)
			cin >> VectorCasieri[i];
		for (int i = 0; i < 2; i++)
			cout << VectorCasieri[i]<<endl;

	delete[]VectorPatiserie;
	for(int i=0;i<3;i++)
	delete[]MatricePatiserie[i];
	delete[]MatricePatiserie;
	delete[]VectorFurnizori;
	delete[]VectorCasieri;

	Client client;
	cout << client;
	string* produsecumparate = new string[3]{ "corn","merdenea","franzela" };
	Client client2(3, produsecumparate);
	cout << client2;
	Client client3 = client;
	cout << client3;
	client2 = client;
	cout << client2;
	client3 = client + client2;
	cout << client3;
	if (client3 > client2)
		cout << "Clientul " << client3.getNume() << " a cumparat mai multe produse decat " << client2.getNume();
	else
		cout << "Clientul " << client2.getNume() << " a cumparat mai multe produse decat " << client3.getNume();
	client.setNume("Ionel");
	cout << client.getId()<<endl;
	cout << client.getNume()<<endl;
	client.setNrProduseCumparate(3, produsecumparate);
	cout<<client.getNrProduseCumparate()<<endl;
	cout << client.getProduseCumparate(2)<<endl;
	client.setCasier(casier1);
	cout<<client.getCasier();

	delete[]produsecumparate;

	

	ofstream c1("Casier.txt", ios::out);
	c1 << casier1;
	c1.close();
	ifstream c2("Casier.txt", ios::in);
	c2 >> casier2;
	c2.close();
	cout << casier2;
	
	ofstream p1("Patiserie.txt", ios::out);
	p1 << patiserie1;
	p1.close();
	ifstream p2("Patiserie.txt", ios::in);
	p2 >> patiserie2;
	cout << patiserie2;
	p2.close();
	
	ofstream f1("Furnizor.txt", ios::out);
	f1 << furnizor1;
	f1.close();
	ifstream f2("Furnizor.txt", ios::in);
	f2 >> furnizor2;
	cout << furnizor2;
	f2.close();

	

	fstream c3("Casier_binar.dat", ios::out | ios::binary);
	casier1.ScriereInFisierBinar(c3);
	c3.close();
	fstream c4("Casier_binar.dat", ios::in | ios::binary);
	casier2.CitireDinFisierBinar(c4);
	c4.close();
	cout << casier2; 

	Client client4;
	cout << client4;
	string* produsecumparate1 = new string[3]{ "corn","merdenea","franzela" };
	Client client5(3, produsecumparate1);
	fstream cl1("Client_binar.dat", ios::out | ios::binary);
	client4.ScriereInFisierBinar(cl1);
	cl1.close();
	fstream cl2("Client_binar.dat", ios::in | ios::binary);
	client5.CitireDinFisierBinar(cl2);
	cout << client5;
	cl2.close();
	*/

	/*CasierSef cs1;
	cout << cs1 << endl;
	CasierSef cs2 = cs1;
	cout << cs2 << endl;
	int* bonusuri = new int[5] {230, 215, 220,280,340};
	CasierSef cs4(45, 3680, 5, bonusuri);
	cs4 = cs1;
	cout << cs4 << endl;
	cs1.setNrBonusuri(5, bonusuri);
	cout << cs1.getNrBonusuri() << endl;
	cout << cs1.getBonusuri(2) << endl;*/

	
PatiseriePeComanda pc1;
cout << pc1 << endl;
//PatiseriePeComanda pc2 = pc1;
//cout << pc2 << endl;
//char* data_plasare = new char[strlen("15-03-2023") + 1];
//strcpy_s(data_plasare, strlen("15-03-2023")+1, "15-03-2023");
//char* data_livrare = new char[strlen("25-03-2023") + 1];
//strcpy_s(data_livrare, strlen("25-03-2023") + 1, "25-03-2023");
//
//PatiseriePeComanda pc3(data_plasare, data_livrare, "Ion", "Paine", 6.2, 0.4);
//cout << pc3 << endl;;
//pc3 = pc1;
//cout << pc3;
Patiserie patiserie6;
patiserie6 = pc1;
cout << patiserie6;

}
