
// Domeniul ales este hypermarket
#include<iostream>
using namespace std;

class Furnizori;
class Casier
{
private:
	static int procent_reducere;
	const int id;
	char* nume;
	int varsta;
	int salariu;
	int vechime;
	bool full_time;
public:
	

	Casier(const Casier& c) :id(c.id)
	{
		this->nume = new char[strlen(c.nume) + 1];
		strcpy_s(nume, strlen(c.nume) + 1, c.nume);
		this->varsta = c.varsta;
		this->salariu = c.salariu;
		this->vechime = c.vechime;
		this->full_time = c.full_time;
	}
	Casier():id(3)
	{
		this->nume = new char[strlen("Dumitru") + 1];
		strcpy_s(nume, strlen("Dumitru") + 1, "Dumitru");
		this->varsta = 30;
		this->salariu = 2500;
		this->vechime = 3;
		this->full_time = true;
	}



	Casier(int varsta, int salariu) :id(4)
	{
		this->nume = new char[strlen("Rares") + 1];
		strcpy_s(nume, strlen("Rares") + 1, "Rares");
		this->varsta = varsta;
		this->salariu = salariu;
		this->vechime = 5;
		this->full_time = true;
	}



	Casier(char* nume, int salariu, int vechime) : id(5)
	{
		this->nume = new char[strlen(nume) + 1];
		strcpy_s(this->nume, strlen(nume) + 1, nume);
		this->varsta = 24;
		this->salariu = salariu;
		this->vechime = vechime;
		this->full_time = false;
	}

	~Casier() {
		if (nume != NULL)
			delete[]this->nume;
	}

	const int getId()
	{
		return this->id;
	}
	char* getNume()
	{
		return this->nume;
	}
	void setNume(char* nume)
	{
		if (this->nume != NULL)
			delete[]this->nume;
		this->nume = new char[strlen(nume) + 1];
		strcpy_s(this->nume, strlen(nume)+1, nume);
	}
	int getVarsta()
	{
		return this->varsta;
	}
	void set_Varsta(int varsta)
	{
		this->varsta = varsta;
	}
	int getSalariu()
	{
		return this->salariu;
	}
	void setSalariu(int salariu)
	{
		this->salariu = salariu;
	}
	int getVechime()
	{
		return this->vechime;
	}
	void setVechime(int vechime)
	{
		this->vechime = vechime;
	}
	bool getFull_time()
	{
		return this->full_time;
	}
	void setFull_time(bool full_time)
	{
		this->full_time = full_time;
	}
	static int getProcent()
	{
		return Casier::procent_reducere;
	}
	static void setProcent(int procent_reducere)
	{
		Casier::procent_reducere = procent_reducere;
	}

	void afisare()
	{
		cout << "Casierul are numele " << nume << " , are id-ul:"<<id<< " ,varsta de " << varsta << " ani, salariul de " << salariu << " lei si o vechime de " << vechime << " ani. Are un procent de reducere de " << procent_reducere<<"% .";
		if (full_time == true)
			cout << " Acesta este angajat full-time" << endl;
		else
			cout << " Acesta este angajat part-time" << endl;

	}
	static void modifica_reducerea(int reducere_noua)
	{
		procent_reducere = reducere_noua;
	}
	friend void Crestere_salariu(Casier& c, int procent,int vechime);
};
int Casier::procent_reducere = 10;

void Crestere_salariu(Casier& c, int procent,int vechime)
{
	int salariu_vechi=c.salariu;
	if (c.vechime > vechime)
		c.salariu = c.salariu + (c.salariu * procent)/100;
		cout << "Inainte de modificarea salariului,casierul " << c.nume << " avea salariul de " << salariu_vechi << " lei. Dupa modificarea procentuala de" << procent << " %" << "salariul acestuia este de " << c.salariu << " lei. Acesta a depasit pragul de vechime de " << vechime << " ani"<<endl;
}

class Patiserie
{
private:
	static int tva;
	const int cod_produs;
	string nume;
	float pret;
	float greutate;
	string* ingrediente;
	int nr_ingrediente;
public:
	
	Patiserie(const Patiserie& p) :cod_produs(p.cod_produs)
	{
		int i;
		this->nume = p.nume;
		this->pret = p.pret;
		this->greutate = p.greutate;
		this->nr_ingrediente = p.nr_ingrediente;
		this->ingrediente = new string[this->nr_ingrediente];
		for (i = 0; i < this->nr_ingrediente; i++)
			this->ingrediente[i] = p.ingrediente[i];
		
	}
	Patiserie():cod_produs(14)
	{
		this->nume = "Merdenea";
		this->pret = 3.5;
		this->greutate = 0.25;
		this->nr_ingrediente = 4;
		this->ingrediente = new string[4];
		this->ingrediente[0] = "sare";
		this->ingrediente[1] = "unt";
		this->ingrediente[2] = "foietaj";
		this->ingrediente[3] = "indulcitori";

	}



	Patiserie(string nume, float pret, float greutate) :cod_produs(20)
	{
		this->nume = nume;
		this->pret = pret;
		this->greutate = greutate;
		this->nr_ingrediente = 2;
		this->ingrediente = new string[2];
		this->ingrediente[0] = "foietaj";
		this->ingrediente[1] = "unt";
	}
	


	Patiserie(int nr_ingrediente,string* ingrediente) :cod_produs(10)
	{
		int i;
		this->nume = "Bagheta";
		this->pret = 5.2;
		this->greutate = 0.5;
		this->nr_ingrediente = nr_ingrediente;
		this->ingrediente = new string[nr_ingrediente];
		for (i = 0; i < nr_ingrediente; i++)
			this->ingrediente[i] = ingrediente[i];

	
	}


	~Patiserie() {
		if (ingrediente != NULL)
			delete[]this->ingrediente;
	}

	
	
	static void crestere_tva()
	{
		tva++;
	}
	
	string getNume()
	{
		return this->nume;
	}
	void setNume(string nume)
	{
		this->nume = nume;
	}
	float getPret()
	{
		return this->pret;
	}
	void setPret(float pret)
	{
		this->pret = pret;
	}
	float getGreutate()
	{
		return this->greutate;
	}
	void setGreutate(float greutate)
	{
		this->greutate = greutate;
	}
	string getIngrediente(int i)
	{
		if (i >= 0 && i < nr_ingrediente)
			return this->ingrediente[i];
	}
	int getNr_ingrediente()
	{
		return this->nr_ingrediente;
	}

	void setIngrediente(string* ingrediente, int nr_ingrediente)
	{
		if (nr_ingrediente != 0)
		{
			this->nr_ingrediente = nr_ingrediente;
			if (this->ingrediente != NULL)
				delete[]this->ingrediente;
			this->ingrediente = new string[this->nr_ingrediente];
			int i;
			for (i = 0; i < nr_ingrediente; i++)
				this->ingrediente[i] = ingrediente[i];

		}
	}

	static int getTva()
	{
		return Patiserie::tva;
	}
	static void setTva(int tva)
	{
		Patiserie::tva = tva;
	}
	const int getCod_produs()
	{
		return this->cod_produs;
	}
	
	void afisare()
	{
		int i;
		cout << "Produsul de patiserie este " << nume << " ,are codul "<<cod_produs<<" ,are un pret de " << pret <<" lei "<< ",o greutate de " << greutate <<" kg "<< " si " << nr_ingrediente <<" ingrediente. Ingredientele sunt: ";
		for (i = 0; i < nr_ingrediente; i++)
			cout << ingrediente[i]<<" ";
		cout << ".Tva-ul aplicat pentru acest produs este de: " << tva<<"%."<<endl;
	}
	friend void Cauta_furnizor(Furnizori f,Patiserie p, string ingredient);
};

int Patiserie::tva = 9;



class Furnizori
{
private:
	static int nr_furnizori;
	const int id;
	string nume;
	char* oras;
	string* produs;
	int nr_produse;
	int durata_contract;
public:
	
	Furnizori(Furnizori& f) :id(f.id)
	{
		int i;
		this->nume = f.nume;
		this->oras = new char[strlen(f.oras) + 1];
		strcpy_s(oras, strlen(f.oras) + 1, f.oras);
		this->nr_produse = f.nr_produse;
		this->produs = new string[this->nr_produse];
		for (i = 0; i < this->nr_produse; i++)
		{
			this->produs[i] = f.produs[i];
		}
		this->durata_contract = f.durata_contract;
	}
	Furnizori(): id(26)
	{
		this->nr_furnizori++;
		this->nume = "Omega";
		this->oras = new char[strlen("Buzau") + 1];
		strcpy_s(oras, strlen("Buzau") + 1, "Buzau");
		this->nr_produse = 3;
		this->produs = new string[nr_produse];
		this->produs[0] = "biscuiti";
		this->produs[1] = "ciocolata";
		this->produs[2] = "caramele";
		this->durata_contract = 1;
	}



	Furnizori(string nume, int durata_contract):id(15)
	{
		this->nr_furnizori++;
		this->nume = nume;
		this->oras = new char[strlen("Bacau") + 1];
		strcpy_s(oras, strlen("Bacau") + 1, "Bacau");
		this->nr_produse = 2;
		this->produs = new string[nr_produse];
		this->produs[0] = "pesmet";
		this->produs[1] = "faina";
		this->durata_contract = 2;
	}



	Furnizori(string* produs) :id(33)
	{
		this->nr_furnizori++;
		this->nume = "Fructo";
		this->oras = new char[strlen("Arges") + 1];
		strcpy_s(oras, strlen("Arges") + 1, "Arges");
		this->nr_produse = 4;
		this->produs = new string[nr_produse];
		for (int i = 0; i < nr_produse; i++)
			this->produs[i] = produs[i];
		this->durata_contract = 3;
	}

	~Furnizori() {
		if (oras != NULL)
			delete[]this->oras;
		if (produs != NULL)
			delete[]this->produs;
	}

	static void afiseaza_nrFurnizori()
	{
		cout << "Numarul total de furnizori este: " << nr_furnizori << endl;
	}


	static int getNrFurnizori()
	{
		return Furnizori::nr_furnizori;
	}
	static void setNrFurnizori(int nr_furnizori)
	{
		Furnizori::nr_furnizori = nr_furnizori;
	}
	const int getIdFurnizori()
	{
		return this->id;
	}
	string getNume()
	{
		return this->nume;
	}
	void setNume(string nume)
	{
		this->nume = nume;
	}
	char* getOras()
	{
		return this->oras;
	}
	void setOras(char* oras)
	{
		if (this->oras != NULL)
			delete[]this->oras;
		this->oras = new char[strlen(oras) + 1];
		strcpy_s(this->oras, strlen(oras) + 1, oras);
	}
	void setProdus(string* produs, int nr_produse)
	{
		if (nr_produse != 0)
		{
			this->nr_produse = nr_produse;
			if (this->produs != NULL)
				delete[]this->produs;
			this->produs = new string[nr_produse];
			int i;
			for (i = 0; i < this->nr_produse; i++)
				this->produs[i] = produs[i];
		}
	}
	string getProdus(int i)
	{
		if (i >= 0 && i < this->nr_produse)
			return this->produs[i];
	}
	int getNrProduse()
	{
		return this->nr_produse;
	}
	int getDurataContract()
	{
		return this->durata_contract;
	}
	void setDurataContract(int durata_contract)
	{
		this->durata_contract = durata_contract;
	}

	void afisare()
	{
		cout << "Furnizorul " << nume << " are id-ul : " << id << " , este din orasul " << oras << ", livreaza " << nr_produse << " produse si are un contract cu durata de " << durata_contract << " ani. Produsele furnizate sunt:";
		for (int i = 0; i < nr_produse; i++)
			cout << produs[i] << " ";
		cout << ".Numarul total de furnizori este: " << nr_furnizori << endl;
		
	}
	friend void Cauta_furnizor(Furnizori f, Patiserie p, string ingredient);
};
int Furnizori::nr_furnizori = 0;

void Cauta_furnizor(Furnizori f, Patiserie p, string ingredient)
{
	int i,ok=0;
	for (i = 0; i < p.nr_ingrediente; i++)
		if (ingredient == p.ingrediente[i])
			ok = 1;

	if (ok == 0)
		cout << "Ingredientul " << ingredient << " nu este folosit in produsul " << p.nume << endl;
	else
	{
		ok = 0;
		for (i = 0; i < f.nr_produse; i++)
			if (ingredient == f.produs[i])
				ok = 1;
		if (ok == 1)
			cout << "Ingredientul este procurat de la furnizorul " << f.nume;
		else
			cout << "Ingredientul nu este procurat de la furnizorul " << f.nume;
	}

	
}


void main()
{
	Casier casier1;
	casier1.afisare();
	Casier casier2(23, 2320);
	casier2.afisare();
	char* nume=new char[strlen("Ioana")+1];
	strcpy_s(nume, strlen("Ioana") + 1, "Ioana");
	Casier casier3(nume, 2400, 3);
	casier3.afisare();
	delete[]nume;

	Patiserie patiserie1;
	patiserie1.afisare();
	Patiserie patiserie2("Covrig", 3.2, 0.15);
	patiserie2.afisare();
	string* ingrediente = new string[2];
	ingrediente[0] = "Sare";
	ingrediente[1] = "Unt";
	Patiserie patiserie3(2, ingrediente);
	patiserie3.afisare();
	delete[]ingrediente;

	Furnizori furnizor1;
	furnizor1.afisare();
	Furnizori furnizor2("Pano", 5);
	furnizor2.afisare();
	string* produs=new string[4];
	produs[0] = "mere";
	produs[1] = "unt";
	produs[2] = "prune";
	produs[3] = "capsuni";
	Furnizori furnizor3(produs);
	furnizor3.afisare();
	delete[]produs;


	Crestere_salariu(casier1, 10, 1);
	Cauta_furnizor(furnizor3, patiserie1, "unt");

	char* nume1 = new char[strlen("Teodor") + 1];
	strcpy_s(nume1, strlen("Teodor") + 1, "Teodor");
	casier1.setNume(nume1);
	casier1.set_Varsta(31);
	casier1.setSalariu(3000);
	casier1.setVechime(4);
	casier1.setFull_time(true);
	casier1.setProcent(8);
	cout << "Casierul are numele " << casier1.getNume() << " , are id-ul:" << casier1.getId() << " ,varsta de " << casier1.getVarsta() << " ani, salariul de " << casier1.getSalariu() << " lei si o vechime de " << casier1.getVechime() << " ani. Are un procent de reducere de " << casier1.getProcent() << "% .";
	if (casier1.getFull_time() == true)
		cout << " Acesta este angajat full-time" << endl;
	else
		cout << " Acesta este angajat part-time" << endl;
	delete[]nume1;

	patiserie2.setNume("Croissant");
	patiserie2.setPret(3);
	patiserie2.setGreutate(0.2);
	string* ingrediente1=new string[3];
	ingrediente1[0] = "sare";
	ingrediente1[1] = "lapte";
	ingrediente1[2] = "drojdie";
	patiserie2.setIngrediente(ingrediente1, 3);
	patiserie2.setTva(8);
	int i;
	cout << "Produsul de patiserie este " << patiserie2.getNume() << " ,are codul " << patiserie2.getCod_produs() << " ,are un pret de " << patiserie2.getPret() << " lei " << ",o greutate de " << patiserie2.getGreutate() << " kg " << " si " << patiserie2.getNr_ingrediente() << " ingrediente. Ingredientele sunt: ";
	for (i = 0; i < patiserie2.getNr_ingrediente(); i++)
		cout << patiserie2.getIngrediente(i) << " ";
	cout << ".Tva-ul aplicat pentru acest produs este de: " << patiserie2.getTva() << "%." << endl;
	delete[]ingrediente1;

	furnizor1.setNrFurnizori(0);
	furnizor1.setNume("Augusto");
	char* oras1 = new char[strlen("Timisoara") + 1];
	strcpy_s(oras1, strlen("Timisoara") + 1, "Timisoara");
	furnizor1.setOras(oras1);
	string* vector_produse = new string[3]{"piper","sare","boia"};
	furnizor1.setProdus(vector_produse,3);
	furnizor1.setDurataContract(4);
	cout << "Furnizorul " << furnizor1.getNume() << " are id-ul : " << furnizor1.getIdFurnizori() << " , este din orasul " << furnizor1.getOras() << ", livreaza " << furnizor1.getNrProduse() << " produse si are un contract cu durata de " << furnizor1.getDurataContract() << " ani. Produsele furnizate sunt:";
	for (int i = 0; i < furnizor1.getNrProduse(); i++)
		cout << furnizor1.getProdus(i) << " ";
	cout << ".Numarul total de furnizori este: " << furnizor1.getNrFurnizori() << endl;
	delete[]oras1;
	delete[]vector_produse;

}
